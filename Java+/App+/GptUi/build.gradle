plugins {
    id 'application'
    id 'org.openjfx.javafxplugin' version "$javaFxPluginVersion"
    id 'org.gradlex.extra-java-module-info' version "$extraJavaModuleInfoVersion"
    id 'org.beryx.jlink' version '2.26.0'
}
javafx {
    version = javaFxVersion
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.web', 'javafx.media']
}
repositories {
    mavenCentral()
}
application {
    mainClass = 'gptui.GptUiMain'
    mainModule = 'GptUi.main'
}
dependencies {
    implementation gsonDep, "com.vladsch.flexmark:flexmark-ext-tables:$flexMarkVersion", logbackClassicDep,
            "org.slf4j:jul-to-slf4j:$slf4jVersion"
    testImplementation "org.assertj:assertj-core:$assertJVersion"
}
extraJavaModuleInfo {
    automaticModule("com.vladsch.flexmark:flexmark", "flexmark")
    automaticModule("com.vladsch.flexmark:flexmark-util-ast", "flexmark.util.ast")
    automaticModule("com.vladsch.flexmark:flexmark-util-format", "flexmark.util.format")
    automaticModule("com.vladsch.flexmark:flexmark-util-builder", "flexmark.util.builder")
    automaticModule("com.vladsch.flexmark:flexmark-util-dependency", "flexmark.util.dependency")
    automaticModule("com.vladsch.flexmark:flexmark-util-html", "flexmark.util.html")
    automaticModule("com.vladsch.flexmark:flexmark-util-sequence", "flexmark.util.sequence")
    automaticModule("com.vladsch.flexmark:flexmark-util-collection", "flexmark.util.collection")
    automaticModule("com.vladsch.flexmark:flexmark-util-data", "flexmark.util.data")
    automaticModule("com.vladsch.flexmark:flexmark-util-misc", "flexmark.util.misc")
    automaticModule("com.vladsch.flexmark:flexmark-util-visitor", "flexmark.util.visitor")
    automaticModule("com.vladsch.flexmark:flexmark-ext-tables", "flexmark.ext.tables")
    automaticModule("com.vladsch.flexmark:flexmark-util", "flexmark.util")
    automaticModule("com.vladsch.flexmark:flexmark-util-options", "flexmark.util.options")
    automaticModule("org.assertj:assertj-core", "org.assertj.core")
    automaticModule("org.awaitility:awaitility", "org.awaitility")
}
jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'GptUi'
    }
}
tasks.jlink.mustRunAfter tasks.clean

def installDir = System.properties['user.home'] + '/installed/GptUI'
tasks.register('addIconToImage', Copy) {
    mustRunAfter tasks.jlink
    from layout.projectDirectory.dir('resources/gptui').file('icon.png')
    into layout.projectDirectory.dir('build/image/bin')
}
tasks.register('deleteInstalledApp', Delete) {
    mustRunAfter tasks.addIconToImage
    delete installDir
}
tasks.register('installLocally', Copy) {
    mustRunAfter tasks.deleteInstalledApp
    dependsOn 'clean', 'jlink', 'addIconToImage', 'deleteInstalledApp'
    from layout.buildDirectory.dir('image').get()
    into installDir
}
